<#@ template debug="false" hostspecific="true" language="C#" #>
<#//Benötigtes NuGet: Microsoft.VisualStudio.TextTemplating.14.0  #>
<#//Lokale Referenz zu EnvDTE muss hinzugefügt werden, damit der FileManager funktioniert.  #>

<# // Standard Assemblies werden im GAC gesucht #> 
<#@ assembly name="System.Core" #>
<# // Eigene Assemblies müssen z.B. als Referenz hinzugefügt werden und dann direkt über das Bin dir referenziert werden #> 
<#@ assembly name="$(TargetDir)ProxyGenerator.dll" #>

<#@ import namespace="ProxyGenerator.Container" #>
<#@ import namespace="ProxyGenerator" #>
<#@ import namespace="ProxyGenerator.Manager" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ProxyGenerator.Container" #>
<#@ assembly name="EnvDTE" #>
<#@ include file="FileManager.ttinclude"#>

<#  //Settings for the Proxy: 
    ProxySettings settings = new ProxySettings();
    //The Name of the WebProject where the T4 ProxyGenerator Template was inserted:
    settings.WebProjectName = "ProxyGeneratorDemoPage";
	//The full Directory to the Webproject, in this Case the Path to the T4 Template is also valide
	//We are search the path above for the WebProjectName to get the root Directory of the Website.
	settings.FullPathToTheWebProject = System.IO.Path.GetFullPath(this.Host.TemplateFile);
	//Tells the Proxy Generator if the AJAX functionnames start not with a Capital Letter:
    settings.LowerFirstCharInFunctionName = true;

	//Create Generator and set the Settings.
	Generator generator = new Generator(settings);
#>

<#
//#############################################################--AngularJs JavaScript Definitions--#############################################################
//##############################################################################################################################################################
//Variablen die ersetzt werden im Modul Template: 
// 1. #ServiceName# => Hier wird der Name des Controllers eingesetzt und ergibt dann controllerNameSrv
// 2. #PrototypeServiceCalls# => Hier werden alle Service Calls eingefgt die für den Controller mit dem passenden Attribut "AngularJs" Markiert wurden.
    var angularJsModule = new TemplateEntry() { TemplateType = TemplateTypes.AngularJsModule, TemplateSuffix = "PSrv"};
	angularJsModule.Template = "function #ServiceName#($http) { this.http = $http; } \r\n\r\n\r\n";
    angularJsModule.Template += "#PrototypeServiceCalls#\r\n\r\n\r\n";
    angularJsModule.Template += "angular.module('#ServiceName#', []) .service('#ServiceName#', ['$http', #ServiceName#]);";
	settings.Templates.Add(angularJsModule);

//Variablen die ersetzt werden im Prototype Template: 
// 1. #ServiceName# => Hier wird der Name des Controllers eingesetzt damit die richtige Prototype Funktion auferufen wird.
// 2. #serviceParamters# => Die Parameterliste für den jeweiligen Ajax Call z.B. name, id, person
// 3. #controllerFunctionName# => Der Name des Ajax Calls entspricht der Funktion im Controller die aufgerufen wird.
// 4. #ServiceCallAndParameters# => Hier wird der passende Aufruf ersetzt durch z.B.: get("GetAutosByHerstellerId/" + value) oder post("GetAutosByHerstellerId/" + value, message)
    var angularJsPrototype = new TemplateEntry() {TemplateType = TemplateTypes.AngularJsPrototype, TemplateSuffix = "PSrv"};
    angularJsPrototype.Template = "#ServiceName#.prototype.#controllerFunctionName# = function (#serviceParamters#) { \r\n";
    angularJsPrototype.Template += "   return this.http.#ServiceCallAndParameters#.then(function (result) {\r\n";
    angularJsPrototype.Template += "        return result.data;\r\n   });\r\n}\r\n\r\n";
	settings.Templates.Add(angularJsPrototype);
#>

<#  var manager = Manager.Create(Host, GenerationEnvironment); 
	var generation = generator.AddAngularJsProxyGenerator();

    foreach (GeneratedProxyEntry entry in generation)
    {
       manager.StartNewFile(entry.FileName); 
 #>

//Warning this file was dynamicly created.
//Please don't change any code it will be overwritten.
//Created on <#= DateTime.Now.Date.ToShortDateString() #> time <#= DateTime.Now.ToShortTimeString()  #> from <#= Environment.UserName #>.

 <#=entry.FileContent #>

<#		manager.EndBlock(); 
	//foreach Close Tag
    }

	manager.Process(true);
#>

<# //Wenn man sein T4 Template debuggt, dann blieb bisher meist eine T4VSHostProcess.exe als Prozess offen und musste manuell über den TaskManager wieder geschlossen werden
   //Denn wenn dieser Prozess noch lief wurden Resourcen blockiert, die es verhinderten das Referenzierte DLLs ersetzt werden konnten.
#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>